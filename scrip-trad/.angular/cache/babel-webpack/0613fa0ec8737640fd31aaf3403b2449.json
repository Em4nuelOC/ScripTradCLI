{"ast":null,"code":"import _asyncToGenerator from \"E:/DAW/2/ScripTrad/ScripTradCLI/scrip-trad/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\nconst native = globalThis.showSaveFilePicker;\n/**\n * @param {Object} [options]\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.accepts] Files you want to accept\n * @param {string} [options.suggestedName] the name to fall back to when using polyfill\n * @param {string} [options._name] the name to fall back to when using polyfill\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @return {Promise<FileSystemFileHandle>}\n */\n\nfunction showSaveFilePicker() {\n  return _showSaveFilePicker.apply(this, arguments);\n}\n\nfunction _showSaveFilePicker() {\n  _showSaveFilePicker = _asyncToGenerator(function* (options = {}) {\n    if (native && !options._preferPolyfill) {\n      return native(options);\n    }\n\n    if (options._name) {\n      console.warn('deprecated _name, spec now have `suggestedName`');\n      options.suggestedName = options._name;\n    }\n\n    const {\n      FileSystemFileHandle\n    } = yield import('./FileSystemFileHandle.js');\n    const {\n      FileHandle\n    } = yield import('./adapters/downloader.js');\n    return new FileSystemFileHandle(new FileHandle(options.suggestedName));\n  });\n  return _showSaveFilePicker.apply(this, arguments);\n}\n\nexport default showSaveFilePicker;\nexport { showSaveFilePicker };","map":{"version":3,"sources":["E:/DAW/2/ScripTrad/ScripTradCLI/scrip-trad/node_modules/native-file-system-adapter/src/showSaveFilePicker.js"],"names":["native","globalThis","showSaveFilePicker","options","_preferPolyfill","_name","console","warn","suggestedName","FileSystemFileHandle","FileHandle"],"mappings":";;AAAA;AAEA,MAAMA,MAAM,GAAGC,UAAU,CAACC,kBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACeA,kB;;;;;0CAAf,WAAmCC,OAAO,GAAG,EAA7C,EAAiD;AAC/C,QAAIH,MAAM,IAAI,CAACG,OAAO,CAACC,eAAvB,EAAwC;AACtC,aAAOJ,MAAM,CAACG,OAAD,CAAb;AACD;;AAED,QAAIA,OAAO,CAACE,KAAZ,EAAmB;AACjBC,MAAAA,OAAO,CAACC,IAAR,CAAa,iDAAb;AACAJ,MAAAA,OAAO,CAACK,aAAR,GAAwBL,OAAO,CAACE,KAAhC;AACD;;AAED,UAAM;AAAEI,MAAAA;AAAF,cAAiC,OAAO,2BAAP,CAAvC;AACA,UAAM;AAAEC,MAAAA;AAAF,cAAuB,OAAO,0BAAP,CAA7B;AACA,WAAO,IAAID,oBAAJ,CAAyB,IAAIC,UAAJ,CAAeP,OAAO,CAACK,aAAvB,CAAzB,CAAP;AACD,G;;;;AAED,eAAeN,kBAAf;AACA,SAASA,kBAAT","sourcesContent":["/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst native = globalThis.showSaveFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.accepts] Files you want to accept\n * @param {string} [options.suggestedName] the name to fall back to when using polyfill\n * @param {string} [options._name] the name to fall back to when using polyfill\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @return {Promise<FileSystemFileHandle>}\n */\nasync function showSaveFilePicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  if (options._name) {\n    console.warn('deprecated _name, spec now have `suggestedName`')\n    options.suggestedName = options._name\n  }\n\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n  const { FileHandle } = await import('./adapters/downloader.js')\n  return new FileSystemFileHandle(new FileHandle(options.suggestedName))\n}\n\nexport default showSaveFilePicker\nexport { showSaveFilePicker }\n"]},"metadata":{},"sourceType":"module"}