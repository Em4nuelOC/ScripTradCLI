{"ast":null,"code":"import _asyncToGenerator from \"E:/DAW/2/ScripTrad/ScripTradCLI/scrip-trad/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport const errors = {\n  INVALID: ['seeking position failed.', 'InvalidStateError'],\n  GONE: ['A requested file or directory could not be found at the time an operation was processed.', 'NotFoundError'],\n  MISMATCH: ['The path supplied exists, but was not an entry of requested type.', 'TypeMismatchError'],\n  MOD_ERR: ['The object can not be modified in this way.', 'InvalidModificationError'],\n  SYNTAX: m => [`Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. ${m}`, 'SyntaxError'],\n  SECURITY: ['It was determined that certain files are unsafe for access within a Web application, or that too many calls are being made on file resources.', 'SecurityError'],\n  DISALLOWED: ['The request is not allowed by the user agent or the platform in the current context.', 'NotAllowedError']\n};\nexport const config = {\n  writable: globalThis.WritableStream\n};\nexport function fromDataTransfer(_x) {\n  return _fromDataTransfer.apply(this, arguments);\n}\n\nfunction _fromDataTransfer() {\n  _fromDataTransfer = _asyncToGenerator(function* (entries) {\n    console.warn('deprecated fromDataTransfer - use `dt.items[0].getAsFileSystemHandle()` instead');\n    const [memory, sandbox, fs] = yield Promise.all([import('./adapters/memory.js'), import('./adapters/sandbox.js'), import('./FileSystemDirectoryHandle.js')]);\n    const folder = new memory.FolderHandle('', false);\n    folder._entries = entries.map(entry => entry.isFile ? new sandbox.FileHandle(entry, false) : new sandbox.FolderHandle(entry, false));\n    return new fs.FileSystemDirectoryHandle(folder);\n  });\n  return _fromDataTransfer.apply(this, arguments);\n}\n\nexport function getDirHandlesFromInput(_x2) {\n  return _getDirHandlesFromInput.apply(this, arguments);\n}\n\nfunction _getDirHandlesFromInput() {\n  _getDirHandlesFromInput = _asyncToGenerator(function* (input) {\n    const {\n      FolderHandle,\n      FileHandle\n    } = yield import('./adapters/memory.js');\n    const {\n      FileSystemDirectoryHandle\n    } = yield import('./FileSystemDirectoryHandle.js');\n    const files = Array.from(input.files);\n    const rootName = files[0].webkitRelativePath.split('/', 1)[0];\n    const root = new FolderHandle(rootName, false);\n    files.forEach(file => {\n      const path = file.webkitRelativePath.split('/');\n      path.shift();\n      const name = path.pop();\n      const dir = path.reduce((dir, path) => {\n        if (!dir._entries[path]) dir._entries[path] = new FolderHandle(path, false);\n        return dir._entries[path];\n      }, root);\n      dir._entries[name] = new FileHandle(file.name, file, false);\n    });\n    return new FileSystemDirectoryHandle(root);\n  });\n  return _getDirHandlesFromInput.apply(this, arguments);\n}\n\nexport function getFileHandlesFromInput(_x3) {\n  return _getFileHandlesFromInput.apply(this, arguments);\n}\n\nfunction _getFileHandlesFromInput() {\n  _getFileHandlesFromInput = _asyncToGenerator(function* (input) {\n    const {\n      FileHandle\n    } = yield import('./adapters/memory.js');\n    const {\n      FileSystemFileHandle\n    } = yield import('./FileSystemFileHandle.js');\n    return Array.from(input.files).map(file => new FileSystemFileHandle(new FileHandle(file.name, file, false)));\n  });\n  return _getFileHandlesFromInput.apply(this, arguments);\n}","map":{"version":3,"sources":["E:/DAW/2/ScripTrad/ScripTradCLI/scrip-trad/node_modules/native-file-system-adapter/src/util.js"],"names":["errors","INVALID","GONE","MISMATCH","MOD_ERR","SYNTAX","m","SECURITY","DISALLOWED","config","writable","globalThis","WritableStream","fromDataTransfer","entries","console","warn","memory","sandbox","fs","Promise","all","folder","FolderHandle","_entries","map","entry","isFile","FileHandle","FileSystemDirectoryHandle","getDirHandlesFromInput","input","files","Array","from","rootName","webkitRelativePath","split","root","forEach","file","path","shift","name","pop","dir","reduce","getFileHandlesFromInput","FileSystemFileHandle"],"mappings":"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","sourcesContent":["export const errors = {\n  INVALID: ['seeking position failed.', 'InvalidStateError'],\n  GONE: ['A requested file or directory could not be found at the time an operation was processed.', 'NotFoundError'],\n  MISMATCH: ['The path supplied exists, but was not an entry of requested type.', 'TypeMismatchError'],\n  MOD_ERR: ['The object can not be modified in this way.', 'InvalidModificationError'],\n  SYNTAX: m => [`Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. ${m}`, 'SyntaxError'],\n  SECURITY: ['It was determined that certain files are unsafe for access within a Web application, or that too many calls are being made on file resources.', 'SecurityError'],\n  DISALLOWED: ['The request is not allowed by the user agent or the platform in the current context.', 'NotAllowedError']\n}\n\nexport const config = {\n  writable: globalThis.WritableStream\n}\n\nexport async function fromDataTransfer (entries) {\n  console.warn('deprecated fromDataTransfer - use `dt.items[0].getAsFileSystemHandle()` instead')\n  const [memory, sandbox, fs] = await Promise.all([\n    import('./adapters/memory.js'),\n    import('./adapters/sandbox.js'),\n    import('./FileSystemDirectoryHandle.js')\n  ])\n\n  const folder = new memory.FolderHandle('', false)\n  folder._entries = entries.map(entry => entry.isFile\n    ? new sandbox.FileHandle(entry, false)\n    : new sandbox.FolderHandle(entry, false)\n  )\n\n  return new fs.FileSystemDirectoryHandle(folder)\n}\n\nexport async function getDirHandlesFromInput (input) {\n  const { FolderHandle, FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemDirectoryHandle } = await import('./FileSystemDirectoryHandle.js')\n\n  const files = Array.from(input.files)\n  const rootName = files[0].webkitRelativePath.split('/', 1)[0]\n  const root = new FolderHandle(rootName, false)\n\n  files.forEach(file => {\n    const path = file.webkitRelativePath.split('/')\n    path.shift()\n    const name = path.pop()\n\n    const dir = path.reduce((dir, path) => {\n      if (!dir._entries[path]) dir._entries[path] = new FolderHandle(path, false)\n      return dir._entries[path]\n    }, root)\n\n    dir._entries[name] = new FileHandle(file.name, file, false)\n  })\n\n  return new FileSystemDirectoryHandle(root)\n}\n\nexport async function getFileHandlesFromInput (input) {\n  const { FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n\n  return Array.from(input.files).map(file =>\n    new FileSystemFileHandle(new FileHandle(file.name, file, false))\n  )\n}\n"]},"metadata":{},"sourceType":"module"}