{"ast":null,"code":"import _asyncToGenerator from \"E:/DAW/2/ScripTrad/ScripTradCLI/scrip-trad/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\nconst def = {\n  accepts: []\n};\nconst native = globalThis.showOpenFilePicker;\n/**\n * @param {Object} [options]\n * @param {boolean} [options.multiple] If you want to allow more than one file\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.accepts] Files you want to accept\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemFileHandle[]>}\n */\n\nfunction showOpenFilePicker() {\n  return _showOpenFilePicker.apply(this, arguments);\n}\n\nfunction _showOpenFilePicker() {\n  _showOpenFilePicker = _asyncToGenerator(function* (options = {}) {\n    const opts = { ...def,\n      ...options\n    };\n\n    if (native && !options._preferPolyfill) {\n      return native(opts);\n    }\n\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.multiple = opts.multiple;\n    input.accept = (opts.accepts || []).map(e => [...(e.extensions || []).map(e => '.' + e), ...(e.mimeTypes || [])]).flat().join(','); // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n\n    input.style.position = 'fixed';\n    input.style.top = '-100000px';\n    input.style.left = '-100000px';\n    document.body.appendChild(input); // Lazy load while the user is choosing the directory\n\n    const p = import('./util.js');\n    yield new Promise(resolve => {\n      input.addEventListener('change', resolve);\n      input.click();\n    });\n    return p.then(m => m.getFileHandlesFromInput(input));\n  });\n  return _showOpenFilePicker.apply(this, arguments);\n}\n\nexport default showOpenFilePicker;\nexport { showOpenFilePicker };","map":{"version":3,"sources":["E:/DAW/2/ScripTrad/ScripTradCLI/scrip-trad/node_modules/native-file-system-adapter/src/showOpenFilePicker.js"],"names":["def","accepts","native","globalThis","showOpenFilePicker","options","opts","_preferPolyfill","input","document","createElement","type","multiple","accept","map","e","extensions","mimeTypes","flat","join","style","position","top","left","body","appendChild","p","Promise","resolve","addEventListener","click","then","m","getFileHandlesFromInput"],"mappings":";;AAAA;AAEA,MAAMA,GAAG,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAZ;AACA,MAAMC,MAAM,GAAGC,UAAU,CAACC,kBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACeA,kB;;;;;0CAAf,WAAmCC,OAAO,GAAG,EAA7C,EAAiD;AAC/C,UAAMC,IAAI,GAAG,EAAE,GAAGN,GAAL;AAAU,SAAGK;AAAb,KAAb;;AAEA,QAAIH,MAAM,IAAI,CAACG,OAAO,CAACE,eAAvB,EAAwC;AACtC,aAAOL,MAAM,CAACI,IAAD,CAAb;AACD;;AAED,UAAME,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAF,IAAAA,KAAK,CAACG,IAAN,GAAa,MAAb;AACAH,IAAAA,KAAK,CAACI,QAAN,GAAiBN,IAAI,CAACM,QAAtB;AACAJ,IAAAA,KAAK,CAACK,MAAN,GAAe,CAACP,IAAI,CAACL,OAAL,IAAgB,EAAjB,EACZa,GADY,CACRC,CAAC,IAAI,CACR,GAAG,CAACA,CAAC,CAACC,UAAF,IAAgB,EAAjB,EAAqBF,GAArB,CAAyBC,CAAC,IAAI,MAAMA,CAApC,CADK,EAER,IAAGA,CAAC,CAACE,SAAF,IAAe,EAAlB,CAFQ,CADG,EAKZC,IALY,GAMZC,IANY,CAMP,GANO,CAAf,CAV+C,CAkB/C;;AACAX,IAAAA,KAAK,CAACY,KAAN,CAAYC,QAAZ,GAAuB,OAAvB;AACAb,IAAAA,KAAK,CAACY,KAAN,CAAYE,GAAZ,GAAkB,WAAlB;AACAd,IAAAA,KAAK,CAACY,KAAN,CAAYG,IAAZ,GAAmB,WAAnB;AACAd,IAAAA,QAAQ,CAACe,IAAT,CAAcC,WAAd,CAA0BjB,KAA1B,EAtB+C,CAwB/C;;AACA,UAAMkB,CAAC,GAAG,OAAO,WAAP,CAAV;AAEA,UAAM,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC3BpB,MAAAA,KAAK,CAACqB,gBAAN,CAAuB,QAAvB,EAAiCD,OAAjC;AACApB,MAAAA,KAAK,CAACsB,KAAN;AACD,KAHK,CAAN;AAKA,WAAOJ,CAAC,CAACK,IAAF,CAAOC,CAAC,IAAIA,CAAC,CAACC,uBAAF,CAA0BzB,KAA1B,CAAZ,CAAP;AACD,G;;;;AAED,eAAeJ,kBAAf;AACA,SAASA,kBAAT","sourcesContent":["/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst def = { accepts: [] }\nconst native = globalThis.showOpenFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.multiple] If you want to allow more than one file\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.accepts] Files you want to accept\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemFileHandle[]>}\n */\nasync function showOpenFilePicker (options = {}) {\n  const opts = { ...def, ...options }\n\n  if (native && !options._preferPolyfill) {\n    return native(opts)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.multiple = opts.multiple\n  input.accept = (opts.accepts || [])\n    .map(e => [\n      ...(e.extensions || []).map(e => '.' + e),\n      ...e.mimeTypes || []]\n    )\n    .flat()\n    .join(',')\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  input.style.position = 'fixed'\n  input.style.top = '-100000px'\n  input.style.left = '-100000px'\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve)\n    input.click()\n  })\n\n  return p.then(m => m.getFileHandlesFromInput(input))\n}\n\nexport default showOpenFilePicker\nexport { showOpenFilePicker }\n"]},"metadata":{},"sourceType":"module"}