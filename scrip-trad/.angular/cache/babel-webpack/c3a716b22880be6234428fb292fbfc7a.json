{"ast":null,"code":"import _asyncToGenerator from \"E:/DAW/2/ScripTrad/ScripTradCLI/scrip-trad/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/* global Blob, DOMException, Response, MessageChannel */\nimport { errors } from '../util.js';\nconst {\n  GONE\n} = errors; // @ts-ignore\n\nconst isSafari = /constructor/i.test(window.HTMLElement) || window.safari || window.WebKitPoint;\nlet TransformStream = globalThis.TransformStream;\nlet WritableStream = globalThis.WritableStream;\nexport class FileHandle {\n  constructor(name = 'unkown') {\n    this.name = name;\n    this.kind = 'file';\n  }\n\n  getFile() {\n    return _asyncToGenerator(function* () {\n      throw new DOMException(...GONE);\n    })();\n  }\n\n  isSameEntry(other) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this === other;\n    })();\n  }\n  /**\n   * @param {object} [options={}]\n   */\n\n\n  createWritable(options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!TransformStream) {\n        // @ts-ignore\n        const ponyfill = yield import('https://cdn.jsdelivr.net/npm/web-streams-polyfill@3/dist/ponyfill.es2018.mjs');\n        TransformStream = ponyfill.TransformStream;\n        WritableStream = ponyfill.WritableStream;\n      }\n\n      const sw = yield navigator.serviceWorker?.getRegistration();\n      const link = document.createElement('a');\n      const ts = new TransformStream();\n      const sink = ts.writable;\n      link.download = _this2.name;\n\n      if (isSafari || !sw) {\n        /** @type {Blob[]} */\n        let chunks = [];\n        ts.readable.pipeTo(new WritableStream({\n          write(chunk) {\n            chunks.push(new Blob([chunk]));\n          },\n\n          close() {\n            const blob = new Blob(chunks, {\n              type: 'application/octet-stream; charset=utf-8'\n            });\n            chunks = [];\n            link.href = URL.createObjectURL(blob);\n            link.click();\n            setTimeout(() => URL.revokeObjectURL(link.href), 10000);\n          }\n\n        }));\n      } else {\n        const {\n          writable,\n          readablePort\n        } = new RemoteWritableStream(WritableStream); // Make filename RFC5987 compatible\n\n        const fileName = encodeURIComponent(_this2.name).replace(/['()]/g, escape).replace(/\\*/g, '%2A');\n        const headers = {\n          'content-disposition': \"attachment; filename*=UTF-8''\" + fileName,\n          'content-type': 'application/octet-stream; charset=utf-8',\n          ...(options.size ? {\n            'content-length': options.size\n          } : {})\n        };\n        const keepAlive = setTimeout(() => sw.active.postMessage(0), 10000);\n        ts.readable.pipeThrough(new TransformStream({\n          transform(chunk, ctrl) {\n            if (chunk instanceof Uint8Array) return ctrl.enqueue(chunk);\n            const reader = new Response(chunk).body.getReader();\n\n            const pump = _ => reader.read().then(e => e.done ? 0 : pump(ctrl.enqueue(e.value)));\n\n            return pump();\n          }\n\n        })).pipeTo(writable).finally(() => {\n          clearInterval(keepAlive);\n        }); // Transfer the stream to service worker\n\n        sw.active.postMessage({\n          url: sw.scope + fileName,\n          headers,\n          readablePort\n        }, [readablePort]); // Trigger the download with a hidden iframe\n\n        const iframe = document.createElement('iframe');\n        iframe.hidden = true;\n        iframe.src = sw.scope + fileName;\n        document.body.appendChild(iframe);\n      }\n\n      return sink.getWriter();\n    })();\n  }\n\n}\nconst WRITE = 0;\nconst PULL = 0;\nconst ERROR = 1;\nconst ABORT = 1;\nconst CLOSE = 2;\n\nclass MessagePortSink {\n  /** @param {MessagePort} port */\n  constructor(port) {\n    port.onmessage = event => this._onMessage(event.data);\n\n    this._port = port;\n\n    this._resetReady();\n  }\n\n  start(controller) {\n    this._controller = controller; // Apply initial backpressure\n\n    return this._readyPromise;\n  }\n\n  write(chunk) {\n    const message = {\n      type: WRITE,\n      chunk\n    }; // Send chunk\n\n    this._port.postMessage(message, [chunk.buffer]); // Assume backpressure after every write, until sender pulls\n\n\n    this._resetReady(); // Apply backpressure\n\n\n    return this._readyPromise;\n  }\n\n  close() {\n    this._port.postMessage({\n      type: CLOSE\n    });\n\n    this._port.close();\n  }\n\n  abort(reason) {\n    this._port.postMessage({\n      type: ABORT,\n      reason\n    });\n\n    this._port.close();\n  }\n\n  _onMessage(message) {\n    if (message.type === PULL) this._resolveReady();\n    if (message.type === ERROR) this._onError(message.reason);\n  }\n\n  _onError(reason) {\n    this._controller.error(reason);\n\n    this._rejectReady(reason);\n\n    this._port.close();\n  }\n\n  _resetReady() {\n    this._readyPromise = new Promise((resolve, reject) => {\n      this._readyResolve = resolve;\n      this._readyReject = reject;\n    });\n    this._readyPending = true;\n  }\n\n  _resolveReady() {\n    this._readyResolve();\n\n    this._readyPending = false;\n  }\n\n  _rejectReady(reason) {\n    if (!this._readyPending) this._resetReady();\n\n    this._readyPromise.catch(() => {});\n\n    this._readyReject(reason);\n\n    this._readyPending = false;\n  }\n\n}\n\nclass RemoteWritableStream {\n  constructor(WritableStream) {\n    const channel = new MessageChannel();\n    this.readablePort = channel.port1;\n    this.writable = new WritableStream(new MessagePortSink(channel.port2));\n  }\n\n}","map":{"version":3,"sources":["E:/DAW/2/ScripTrad/ScripTradCLI/scrip-trad/node_modules/native-file-system-adapter/src/adapters/downloader.js"],"names":["errors","GONE","isSafari","test","window","HTMLElement","safari","WebKitPoint","TransformStream","globalThis","WritableStream","FileHandle","constructor","name","kind","getFile","DOMException","isSameEntry","other","createWritable","options","ponyfill","sw","navigator","serviceWorker","getRegistration","link","document","createElement","ts","sink","writable","download","chunks","readable","pipeTo","write","chunk","push","Blob","close","blob","type","href","URL","createObjectURL","click","setTimeout","revokeObjectURL","readablePort","RemoteWritableStream","fileName","encodeURIComponent","replace","escape","headers","size","keepAlive","active","postMessage","pipeThrough","transform","ctrl","Uint8Array","enqueue","reader","Response","body","getReader","pump","_","read","then","e","done","value","finally","clearInterval","url","scope","iframe","hidden","src","appendChild","getWriter","WRITE","PULL","ERROR","ABORT","CLOSE","MessagePortSink","port","onmessage","event","_onMessage","data","_port","_resetReady","start","controller","_controller","_readyPromise","message","buffer","abort","reason","_resolveReady","_onError","error","_rejectReady","Promise","resolve","reject","_readyResolve","_readyReject","_readyPending","catch","channel","MessageChannel","port1","port2"],"mappings":"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","sourcesContent":["/* global Blob, DOMException, Response, MessageChannel */\n\nimport { errors } from '../util.js'\n\nconst { GONE } = errors\n// @ts-ignore\nconst isSafari = /constructor/i.test(window.HTMLElement) || window.safari || window.WebKitPoint\nlet TransformStream = globalThis.TransformStream\nlet WritableStream = globalThis.WritableStream\n\nexport class FileHandle {\n  constructor (name = 'unkown') {\n    this.name = name\n    this.kind = 'file'\n  }\n\n  async getFile () {\n    throw new DOMException(...GONE)\n  }\n\n  async isSameEntry(other) {\n    return this === other\n  }\n\n  /**\n   * @param {object} [options={}]\n   */\n  async createWritable (options = {}) {\n    if (!TransformStream) {\n      // @ts-ignore\n      const ponyfill = await import('https://cdn.jsdelivr.net/npm/web-streams-polyfill@3/dist/ponyfill.es2018.mjs')\n      TransformStream = ponyfill.TransformStream\n      WritableStream = ponyfill.WritableStream\n    }\n    const sw = await navigator.serviceWorker?.getRegistration()\n    const link = document.createElement('a')\n    const ts = new TransformStream()\n    const sink = ts.writable\n\n    link.download = this.name\n\n    if (isSafari || !sw) {\n      /** @type {Blob[]} */\n      let chunks = []\n      ts.readable.pipeTo(new WritableStream({\n        write (chunk) {\n          chunks.push(new Blob([chunk]))\n        },\n        close () {\n          const blob = new Blob(chunks, { type: 'application/octet-stream; charset=utf-8' })\n          chunks = []\n          link.href = URL.createObjectURL(blob)\n          link.click()\n          setTimeout(() => URL.revokeObjectURL(link.href), 10000)\n        }\n      }))\n    } else {\n      const { writable, readablePort } = new RemoteWritableStream(WritableStream)\n      // Make filename RFC5987 compatible\n      const fileName = encodeURIComponent(this.name).replace(/['()]/g, escape).replace(/\\*/g, '%2A')\n      const headers = {\n        'content-disposition': \"attachment; filename*=UTF-8''\" + fileName,\n        'content-type': 'application/octet-stream; charset=utf-8',\n        ...(options.size ? { 'content-length': options.size } : {})\n      }\n\n      const keepAlive = setTimeout(() => sw.active.postMessage(0), 10000)\n\n      ts.readable.pipeThrough(new TransformStream({\n        transform (chunk, ctrl) {\n          if (chunk instanceof Uint8Array) return ctrl.enqueue(chunk)\n          const reader = new Response(chunk).body.getReader()\n          const pump = _ => reader.read().then(e => e.done ? 0 : pump(ctrl.enqueue(e.value)))\n          return pump()\n        }\n      })).pipeTo(writable).finally(() => {\n        clearInterval(keepAlive)\n      })\n\n      // Transfer the stream to service worker\n      sw.active.postMessage({\n        url: sw.scope + fileName,\n        headers,\n        readablePort\n      }, [readablePort])\n\n      // Trigger the download with a hidden iframe\n      const iframe = document.createElement('iframe')\n      iframe.hidden = true\n      iframe.src = sw.scope + fileName\n      document.body.appendChild(iframe)\n    }\n\n    return sink.getWriter()\n  }\n}\n\nconst WRITE = 0\nconst PULL = 0\nconst ERROR = 1\nconst ABORT = 1\nconst CLOSE = 2\n\nclass MessagePortSink {\n  /** @param {MessagePort} port */\n  constructor (port) {\n    port.onmessage = event => this._onMessage(event.data)\n    this._port = port\n    this._resetReady()\n  }\n\n  start (controller) {\n    this._controller = controller\n    // Apply initial backpressure\n    return this._readyPromise\n  }\n\n  write (chunk) {\n    const message = { type: WRITE, chunk }\n\n    // Send chunk\n    this._port.postMessage(message, [chunk.buffer])\n\n    // Assume backpressure after every write, until sender pulls\n    this._resetReady()\n\n    // Apply backpressure\n    return this._readyPromise\n  }\n\n  close () {\n    this._port.postMessage({ type: CLOSE })\n    this._port.close()\n  }\n\n  abort (reason) {\n    this._port.postMessage({ type: ABORT, reason })\n    this._port.close()\n  }\n\n  _onMessage (message) {\n    if (message.type === PULL) this._resolveReady()\n    if (message.type === ERROR) this._onError(message.reason)\n  }\n\n  _onError (reason) {\n    this._controller.error(reason)\n    this._rejectReady(reason)\n    this._port.close()\n  }\n\n  _resetReady () {\n    this._readyPromise = new Promise((resolve, reject) => {\n      this._readyResolve = resolve\n      this._readyReject = reject\n    })\n    this._readyPending = true\n  }\n\n  _resolveReady () {\n    this._readyResolve()\n    this._readyPending = false\n  }\n\n  _rejectReady (reason) {\n    if (!this._readyPending) this._resetReady()\n    this._readyPromise.catch(() => {})\n    this._readyReject(reason)\n    this._readyPending = false\n  }\n}\n\nclass RemoteWritableStream {\n  constructor (WritableStream) {\n    const channel = new MessageChannel()\n    this.readablePort = channel.port1\n    this.writable = new WritableStream(\n      new MessagePortSink(channel.port2)\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}